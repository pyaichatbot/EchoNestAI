"""add tags and response_quality to chat_feedback

Revision ID: 8d77eeb80c3c
Revises: 75539371b803
Create Date: 2025-05-01 18:32:01.282367

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '8d77eeb80c3c'
down_revision: Union[str, None] = '75539371b803'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_learning_progress_content_id', table_name='learning_progress')
    op.drop_index('ix_learning_progress_group_id', table_name='learning_progress')
    op.drop_index('ix_learning_progress_user_id', table_name='learning_progress')
    op.drop_table('learning_progress')
    op.add_column('chat_feedback', sa.Column('tags', postgresql.JSONB(astext_type=sa.Text()), nullable=True))
    op.add_column('chat_feedback', sa.Column('response_quality', sa.String(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('chat_feedback', 'response_quality')
    op.drop_column('chat_feedback', 'tags')
    op.create_table('learning_progress',
    sa.Column('id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('user_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('group_id', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('content_id', sa.VARCHAR(), autoincrement=False, nullable=False),
    sa.Column('progress', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=False),
    sa.Column('score', sa.DOUBLE_PRECISION(precision=53), autoincrement=False, nullable=True),
    sa.Column('time_spent', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('last_accessed', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('completed_sections', postgresql.JSONB(astext_type=sa.Text()), autoincrement=False, nullable=True),
    sa.Column('mastery_level', postgresql.ENUM('BEGINNER', 'INTERMEDIATE', 'ADVANCED', 'EXPERT', name='masterylevel'), autoincrement=False, nullable=True),
    sa.Column('category', sa.VARCHAR(), autoincrement=False, nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['content_id'], ['content.id'], name='learning_progress_content_id_fkey'),
    sa.ForeignKeyConstraint(['group_id'], ['groups.id'], name='learning_progress_group_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='learning_progress_pkey')
    )
    op.create_index('ix_learning_progress_user_id', 'learning_progress', ['user_id'], unique=False)
    op.create_index('ix_learning_progress_group_id', 'learning_progress', ['group_id'], unique=False)
    op.create_index('ix_learning_progress_content_id', 'learning_progress', ['content_id'], unique=False)
    # ### end Alembic commands ###
